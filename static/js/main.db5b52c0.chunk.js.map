{"version":3,"sources":["common/Button.tsx","components/Game.tsx","App.tsx","index.tsx"],"names":["Button","className","restProps","numCols","operations","colors","resetGrid","Array","from","length","map","fill","countNeighbors","grid","x","y","reduce","acc","i","j","col","Game","useState","setGrid","running","setRunning","generation","setGeneration","runningRef","useRef","current","generationRef","runSimulation","useCallback","setInterval","currentGrid","produce","gridCopy","count","randomizeColor","randomIndex","Math","floor","random","onClick","rows","push","seedGrid","style","gridTemplateColumns","rowIdx","colIdx","newGrid","handleManualFill","backgroundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db5b52c0.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport './Button.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst Button: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <button\r\n            className='default'\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React, { useCallback, useRef, useState, FC } from 'react';\r\nimport produce from 'immer';\r\nimport './Game.css'\r\nimport Button from '../common/Button';\r\n\r\nconst numRows = 25;\r\nconst numCols = 25;\r\nconst speed = 500;\r\n\r\nconst operations = [\r\n    [-1, -1],\r\n    [-1, 0],\r\n    [-1, 1],\r\n    [0, -1],\r\n    [0, 1],\r\n    [1, -1],\r\n    [1, 0],\r\n    [1, 1],\r\n];\r\n\r\nconst colors = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\r\n    '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n    '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\r\n    '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n    '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',\r\n    '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n    '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',\r\n    '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n    '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',\r\n    '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\nconst resetGrid = () =>\r\n    Array.from({ length: numRows }).map(() =>\r\n        Array.from({ length: numCols }).fill(0),\r\n    );\r\n\r\nconst seedGrid = () => {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n        rows.push(Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0)));\r\n    }\r\n    return rows;\r\n};\r\n\r\nconst countNeighbors = (grid: any[][], x: number, y: number) => {\r\n    return operations.reduce((acc, [i, j]) => {\r\n        const row = (x + i + numRows) % numRows;\r\n        const col = (y + j + numCols) % numCols;\r\n        acc += grid[row][col];\r\n        return acc;\r\n    }, 0);\r\n};\r\n\r\nexport const Game: FC = () => {\r\n    const [grid, setGrid] = useState(() => resetGrid());\r\n\r\n    const [running, setRunning] = useState(false);\r\n    const [generation, setGeneration] = useState(0);\r\n\r\n    const runningRef = useRef(running);\r\n    runningRef.current = running;\r\n\r\n    const generationRef = useRef(generation);\r\n    generationRef.current = generation;\r\n\r\n    const runSimulation = useCallback(() => {\r\n        setInterval(() => {\r\n            if (!runningRef.current) {\r\n                return;\r\n            }\r\n\r\n            setGrid((currentGrid) =>\r\n                produce(currentGrid, (gridCopy) => {\r\n                    for (let i = 0; i < numRows; i++) {\r\n                        for (let j = 0; j < numCols; j++) {\r\n                            const count = countNeighbors(currentGrid, i, j);\r\n                            if (currentGrid[i][j] === 1 && (count < 2 || count > 3))\r\n                                gridCopy[i][j] = 0;\r\n                            if (!currentGrid[i][j] && count === 3) gridCopy[i][j] = 1;\r\n                        }\r\n                    }\r\n                }),\r\n            );\r\n            setGeneration(++generationRef.current);\r\n        }, speed);\r\n    }, []);\r\n\r\n    const handleSimulation = () => {\r\n        setRunning(!running);\r\n        runningRef.current = !running;\r\n        if (!running) {\r\n            runSimulation();\r\n        }\r\n    }\r\n\r\n    const handleManualFill = (rowIdx: number, colIdx: number) => {\r\n        const newGrid = produce(grid, (gridCopy) => {\r\n            gridCopy[rowIdx][colIdx] = grid[rowIdx][colIdx] ? 0 : 1;\r\n        });\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const handleClear = () => {\r\n        setGrid(resetGrid());\r\n        setGeneration(0);\r\n    }\r\n\r\n    const randomizeColor = () => {\r\n        const randomIndex = Math.floor(Math.random() * 50)\r\n        return colors[randomIndex]\r\n    }\r\n\r\n    return (\r\n        <div className='game-container'>\r\n            <div className='btn-block'>\r\n                <Button onClick={handleSimulation}>\r\n                    {!running ? 'Start' : 'Stop'}\r\n                </Button>\r\n                <Button onClick={handleClear}>\r\n                    Clear\r\n                </Button>\r\n                <Button onClick={() => { setGrid(seedGrid()) }}>\r\n                    Seed\r\n                </Button>\r\n            </div>\r\n\r\n            <p className='info'>Generation: {generation}</p>\r\n\r\n            <div className='field' style={{ gridTemplateColumns: `repeat(${numCols}, 20px)` }}>\r\n                {grid.map((rows, rowIdx) =>\r\n                    rows.map((col, colIdx) => (\r\n                        <div className='cell'\r\n                            key={`${rowIdx}-${colIdx}`}\r\n                            onClick={() => handleManualFill(rowIdx, colIdx)}\r\n                            style={{ backgroundColor: grid[rowIdx][colIdx] ? randomizeColor() : '#eee' }}\r\n                        />\r\n                    )),\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import { FC } from \"react\";\r\nimport { Game } from \"./components/Game\";\r\nimport './App.css'\r\n\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <Game />\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}